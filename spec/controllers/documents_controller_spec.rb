require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DocumentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Document. As you add validations to Document, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DocumentsController. Be sure to keep this updated too.

  describe "GET #show" do
    context 'when requested document exists' do
      let(:document) { FactoryGirl.create(:document) }
      before(:each) { get :show, id: document.id }

      it 'success' do
        expect(response).to be_success
      end

      it 'assigns it to @document' do
        expect(assigns(:document)).to eq document
      end
    end
  end

  describe "GET #new" do
    login_user
    it "assigns a new document as @document" do
      get :new#, {}, valid_session
      expect(assigns(:document)).to be_a_new(Document)
    end
  end

  describe "GET #edit" do
    login_user
    context 'when requested document exists' do
      let(:document) { FactoryGirl.create(:document) }
      before(:each) { get :edit, id: document.id }

      it "assigns the requested document as @document" do
        get :edit, {:id => document.to_param}
        expect(assigns(:document)).to eq(document)
      end
    end
  end

  describe "GET #index" do
    let(:document) { FactoryGirl.create(:document) }
    it "assigns all documents as @documents" do
      get :index, params: {}
      expect(assigns(:documents)).to eq([document])
    end
  end

  # let(:valid_session) { {} }

  # describe "GET #index" do
  #   it "assigns all documents as @documents" do
  #     document = Document.create! valid_attributes
  #     get :index, params: {}, session: valid_session
  #     expect(assigns(:documents)).to eq([document])
  #   end
  # end

  # describe "GET #show" do
  #   it "assigns the requested document as @document" do
  #     document = Document.create! valid_attributes
  #     get :show, params: {id: document.to_param}, session: valid_session
  #     expect(assigns(:document)).to eq(document)
  #   end
  # end

  # describe "GET #new" do
  #   it "assigns a new document as @document" do
  #     get :new, params: {}, session: valid_session
  #     expect(assigns(:document)).to be_a_new(Document)
  #   end
  # end

  # describe "GET #edit" do
  #   it "assigns the requested document as @document" do
  #     document = Document.create! valid_attributes
  #     get :edit, params: {id: document.to_param}, session: valid_session
  #     expect(assigns(:document)).to eq(document)
  #   end
  # end

  # describe "POST #create" do
  #   context "with valid params" do
  #     it "creates a new Document" do
  #       expect {
  #         post :create, params: {document: valid_attributes}, session: valid_session
  #       }.to change(Document, :count).by(1)
  #     end

  #     it "assigns a newly created document as @document" do
  #       post :create, params: {document: valid_attributes}, session: valid_session
  #       expect(assigns(:document)).to be_a(Document)
  #       expect(assigns(:document)).to be_persisted
  #     end

  #     it "redirects to the created document" do
  #       post :create, params: {document: valid_attributes}, session: valid_session
  #       expect(response).to redirect_to(Document.last)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns a newly created but unsaved document as @document" do
  #       post :create, params: {document: invalid_attributes}, session: valid_session
  #       expect(assigns(:document)).to be_a_new(Document)
  #     end

  #     it "re-renders the 'new' template" do
  #       post :create, params: {document: invalid_attributes}, session: valid_session
  #       expect(response).to render_template("new")
  #     end
  #   end
  # end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested document" do
  #       document = Document.create! valid_attributes
  #       put :update, params: {id: document.to_param, document: new_attributes}, session: valid_session
  #       document.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested document as @document" do
  #       document = Document.create! valid_attributes
  #       put :update, params: {id: document.to_param, document: valid_attributes}, session: valid_session
  #       expect(assigns(:document)).to eq(document)
  #     end

  #     it "redirects to the document" do
  #       document = Document.create! valid_attributes
  #       put :update, params: {id: document.to_param, document: valid_attributes}, session: valid_session
  #       expect(response).to redirect_to(document)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns the document as @document" do
  #       document = Document.create! valid_attributes
  #       put :update, params: {id: document.to_param, document: invalid_attributes}, session: valid_session
  #       expect(assigns(:document)).to eq(document)
  #     end

  #     it "re-renders the 'edit' template" do
  #       document = Document.create! valid_attributes
  #       put :update, params: {id: document.to_param, document: invalid_attributes}, session: valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end

  describe "DELETE #destroy" do
    login_user
    it "destroys the requested document" do
      document = FactoryGirl.create(:document)
      expect {
        delete :destroy, {:id => document.to_param}
      }.to change(Document, :count).by(-1)
    end

    it "redirects to the agencies list" do
      document = FactoryGirl.create(:document)
      delete :destroy, {:id => document.to_param}
      expect(response).to redirect_to(documents_url)
    end
  end
end
