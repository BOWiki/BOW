# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AgenciesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Agency. As you add validations to Agency, be sure to
  # adjust the attributes here as well.

  describe 'GET #show' do
    context 'when requested agency exists' do
      let(:agency) { FactoryGirl.create(:agency) }
      before(:each) { get :show, id: agency.id }

      it 'success' do
        expect(response).to be_success
      end

      it 'assigns it to @agency' do
        expect(assigns(:agency)).to eq agency
      end
    end
  end

  describe 'GET #new' do
    login_user
    it 'assigns a new agency as @agency' do
      get :new # , {}, valid_session
      expect(assigns(:agency)).to be_a_new(Agency)
    end
  end

  describe 'GET #edit' do
    login_user
    context 'when requested agency exists' do
      let(:agency) { FactoryGirl.create(:agency) }
      before(:each) { get :edit, id: agency.id }

      it 'assigns the requested agency as @agency' do
        get :edit, id: agency.to_param
        expect(assigns(:agency)).to eq(agency)
      end
    end
  end

  describe 'DELETE #destroy' do
    login_user
    it 'destroys the requested agency' do
      agency = FactoryGirl.create(:agency)
      expect do
        delete :destroy, id: agency.to_param
      end.to change(Agency, :count).by(-1)
    end

    it 'redirects to the agencies list' do
      agency = FactoryGirl.create(:agency)
      delete :destroy, id: agency.to_param
      expect(response).to redirect_to(agencies_url)
    end
  end
end
